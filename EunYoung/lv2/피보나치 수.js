// 피보나치 수열 : 각 숫자가 바로 앞의 두 숫자의 합으로 이루어진 수열

// 수열의 첫 두 항은 0과 1입니다.
// 그 이후의 모든 항은 바로 앞의 두 항의 합으로 정의됩니다.
// 예: 0, 1, 1, 2, 3, 5, 8, 13, 21, ...

// 수학적으로 표현하면
// F(0) = 0
// F(1) = 1
// F(n) = F(n-1) + F(n-2), n ≥ 2

function solution(n) {
  // 피보나치 수열을 저장할 배열 초기화
  let arr = [0, 1];

  // 2부터 n까지 피보나치 수 계산
  for (let i = 2; i <= n; i++) {
    // 이전 두 수의 합을 계산하고 1234567로 나눈 나머지를 저장
    arr[i] = (arr[i - 1] + arr[i - 2]) % 1234567;
    console.log(arr[i]);
  }

  // n번째 피보나치 수 반환
  return arr[n];
}

// 시간복잡도
// 루프 내부의 연산 arr[i] = (arr[i-1] + arr[i-2]) % 1234567은 상수 시간 O(1)이 걸립니다.
// 배열 접근, 덧셈, 모듈로 연산 모두 상수 시간 연산입니다.

// 전체 시간 복잡도 -> O(n)
