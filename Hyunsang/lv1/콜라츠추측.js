function solution(num) {
    var cnt = 0;  

    // 최대 500번 반복 (500번 이상 변환 시 -1을 반환하기 위해 설정)
    while (cnt < 500) {
        // num이 1이면 변환 횟수를 반환
        if (num === 1) {
            return cnt;  // num이 1이 되면 cnt(변환 횟수)를 반환
        }
        cnt++;  // 변환 횟수 증가
        // num이 짝수이면 2로 나누고, 홀수이면 3을 곱하고 1을 더함
        num = num % 2 === 0 ? (num / 2) : (num * 3 + 1);
    }

    // 500번 반복해도 num이 1이 되지 않으면 -1 반환
    return -1;
}
/* 
시간복잡도 :
최악의 경우, 이 반복은 최대 500번까지 실행될 수 있으므로, 
이 코드의 최악 시간 복잡도는 O(500)
결국 시간 복잡도는 O(1) (상수 시간)으로 간주
*/