function solution(n) {
    const arr = Array.from({ length: n }, (_, i) => Array(i + 1).fill(0));
    let num = 1;
    let x = -1, y = 0;

    while (n > 0) {
        for (let i = 0; i < n; i++) arr[++x][y] = num++;
        for (let i = 0; i < n - 1; i++) arr[x][++y] = num++;
        for (let i = 0; i < n - 2; i++) arr[--x][--y] = num++;
        n -= 3;
    }

    return arr.flat();
}

/*
n 크기의 2차원 배열을 생성하고, 각 행의 길이는 해당 행의 인덱스보다 1만큼 김
변수 설정: 시작 위치를 (−1,0)으로 설정하고, 숫자를 1부터 시작
반복문에서 아래로 이동하면서 숫자를 채우고 오른쪽으로 이동하면서 숫자를 채움
위로 대각선으로 이동하면서 숫자를 채우고 각 방향마다 이동할 수 있는 횟수를 줄여가며 반복
최종적으로 배열을 평탄화하여 결과를 반환

시간복잡도 - O(n^2)
삼각형의 모든 요소를 한 번씩 방문하여 값을 할당하기 때문

금요일 휴가였어서 뒤늦게 올립니다 죄송합니다ㅜ
*/
